{"version":3,"sources":["../src/worker.ts"],"names":[],"mappings":";AACA,qCAAoC;AACpC,2CAA6D;AAG7D,IAAI,OAAO,GAAG,IAAI,iBAAO,EAAE,CAAC;AAG5B,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,UAAU,GAAmB;IAC/C,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;QAGf,KAAK,0BAAa,CAAC,WAAW;YAC1B,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;gBACd,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACrC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;YACzE,CAAC;YAED,KAAK,CAAC;QAGV,KAAK,0BAAa,CAAC,WAAW;YAC1B,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAC1B,KAAK,CAAC;IACd,CAAC;AACL,CAAC,CAAC,CAAC","file":"worker.js","sourcesContent":["// typechecker\r\nimport { Checker } from './checker';\r\nimport { WorkerCommand, IWorkerOptions } from './interfaces';\r\n\r\n// create checker instance\r\nlet checker = new Checker();\r\n\r\n// listen for messages\r\nprocess.on('message', function (msg: IWorkerOptions) {\r\n    switch (msg.type) {\r\n\r\n        // tell checker to inspect code\r\n        case WorkerCommand.inspectCode:\r\n            if (msg.options) {\r\n                checker.inspectCode(msg.options);\r\n            } else {\r\n                throw new Error('You tried to inspect code without ts/lint options');\r\n            }\r\n\r\n            break;\r\n\r\n        // tell checker to print result\r\n        case WorkerCommand.printResult:\r\n            checker.printResult(true);\r\n            break;\r\n    }\r\n});\r\n"],"sourceRoot":"src/"}